{"version":3,"sources":["navigation/screens/HomeScreen.js","navigation/screens/DetailsScreen.js","navigation/screens/CameraMobileScreen.js","navigation/MainContainer.js","App.js"],"names":["HomeScreen","navigation","View","style","styles","information","Text","StyleSheet","create","flex","justifyContent","alignContent","alignItems","container","backgroundColor","cameraPreview","DetailsScreen","Button","title","onPress","navigate","buttonContainer","App","useState","hasCameraPermission","setCamera","imagePadding","ratio","Dimensions","get","height","width","isRatioSet","useEffect","prepareRatio","setCameraReady","CameraType","back","type","setType","Camera","marginTop","marginBottom","onCameraReady","ref","TouchableOpacity","button","current","front","text","Tab","createBottomTabNavigator","MainContainer","NavigationContainer","Navigator","initialRouteName","screenOptions","route","tabBarIcon","iconName","focused","color","size","routeName","name","Ionicons","Screen","component","CameraMobileScreen"],"mappings":"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","file":"static/js/app.dff188a3.chunk.js","sourcesContent":["import { useState , useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { Button, StyleSheet, Text, TouchableOpacity, View, Dimensions, Platform } from 'react-native';\n\nexport default function HomeScreen({navigation}) {\n\treturn (\n\t\t<View style={styles.information}>\n\t\t\t<Text>This is the homescreen</Text>\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tinformation: { \n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignContent: 'center',\n\t\talignItems: 'center',\n\t},\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#000',\n\t\tjustifyContent: 'center'\n\t},\n\tcameraPreview: {\n\t\tflex: 1,\n\t}\n});\n\n","import { useState } from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { Button, StyleSheet, Text, TouchableOpacity, View, Dimensions } from 'react-native';\r\n\r\nexport default function DetailsScreen({ navigation }) {\r\n\t\r\n\treturn (\r\n\t\t<View style={styles.container}>\r\n\t\t\t<Button\r\n\t\t\t\ttitle=\"Navigate to home screen\"\r\n\t\t\t\tonPress={() => navigation.navigate(\"Home\")}\r\n\t\t\t/>\r\n\t\t\t\r\n\t\t\t<View style={styles.buttonContainer}>\r\n\t\t\t\t<Text>\r\n\t\t\t\t\tThis is an test\r\n\t\t\t\t</Text>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t\tbackgroundColor: '#fff',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'center',\r\n\t},\r\n});\r\n\r\n","import { Camera, CameraType } from 'expo-camera';\nimport { useState , useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { Button, StyleSheet, Text, TouchableOpacity, View, Dimensions, Platform } from 'react-native';\n\nexport default function App() {\n\t// TODO: Improve camera resolution calculation\n\t//Camera Permissions\n\tconst [hasCameraPermission, setHasCameraPermission] = useState(null);\n\tconst [camera, setCamera] = useState(null);\n\n\t// Set screen ratio and padding\n\tconst [imagePadding, setImagePadding] = useState(0);\n\tconst [ratio, setRatio] = useState('4:3')\n\tconst { height, width } = Dimensions.get('window');\n\tconst screenRatio = height / width;\n\tconst [isRatioSet, setIsRatioSet] = useState(false);\n\n\tuseEffect(() => {\n\t\tasync function getCameraStatus() {\n\t\t\tconst { status } = await Camera.requestPermissionsAsync();\n\t\t\tsetHasCameraPermission(status == 'granted');\n\t\t}\n\t}, []);\n\t\n\tconst prepareRatio = async() => {\n\t\tlet desiredRatio = '4:3'\n\t};\n\t\n\tconst setCameraReady = async() => {\n\t\tif (!isRatioSet) {\n\t\t\tawait prepareRatio();\n\t\t}\n\t}\n\t\n\tconst [type, setType] = useState(CameraType.back);\n\n\tfunction toggleCameraType() {\n\t\tsetType(current => (current === CameraType.back ? CameraType.front : CameraType.back));\n\t}\n\n\tif (hasCameraPermission === null) {\n\t\treturn (\n\t\t\t<View style={styles.information}>\n\t\t\t\t<Text>Waiting for camera permissions</Text>\n\t\t\t</View>\n\t\t\t);\n\t\t} else if (hasCameraPermission === false) {\n\t\t\treturn (\n\t\t\t<View style={styles.information}>\n\t\t\t\t<Text>No access to camera</Text>\n\t\t\t</View>\n\t\t\t);\n\t\t} else { \n\t\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<Camera \n\t\t\t\tstyle={[styles.cameraPreview, {marginTop: imagePadding, marginBottom: imagePadding}]}\n\t\t\t\tonCameraReady={setCameraReady}\n\t\t\t\tratio={ratio}\n\t\t\t\tref={(ref) => {\n\t\t\t\t\tsetCamera(ref);\n\t\t\t\t}}\n\t\t\t\ttype={type}\n\t\t\t\t>\n\t\t\t\t\t<View style={styles.buttonContainer}>\n\t\t\t\t\t\t<TouchableOpacity style={styles.button} onPress={toggleCameraType}>\n\t\t\t\t\t\t\t<Text style={styles.text}>Flip Camera</Text>\n\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t</View>\n\t\t\t\t</Camera>\n\t\t\t</View>\n\t\t\t);\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tinformation: { \n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignContent: 'center',\n\t\talignItems: 'center',\n\t},\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#000',\n\t\tjustifyContent: 'center'\n\t},\n\tcameraPreview: {\n\t\tflex: 1,\n\t}\n});\n\n","import * as React from 'react';\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport Ionicons from 'react-native-vector-icons/Ionicons'\n\n// Screens\nimport HomeScreen from \"./screens/HomeScreen\";\nimport DetailsScreen from \"./screens/DetailsScreen\";\nimport CameraMobileScreen from \"./screens/CameraMobileScreen\";\n\n// Screen names\nconst homeName = \"Home\";\nconst detailsName = \"Details\";\nconst cameraMobileName = \"Camera\"\n\nconst Tab = createBottomTabNavigator();\n\nexport default function MainContainer() {\n    return (\n        <NavigationContainer>\n            <Tab.Navigator\n                initialRouteName={homeName}\n                screenOptions={({route}) => ({\n                    tabBarIcon: ({focused, color, size}) => {\n                        let iconName;\n                        let routeName = route.name;\n\n                        if (routeName === homeName) {\n                            iconName = focused ? 'home' : 'home-outline'\n                        } else if (routeName === detailsName) {\n                            iconName = focused ? 'list' : 'list-outline'\n                        } else if (routeName === cameraMobileName) {\n                            iconName = focused ? 'list' : 'camera-outline'\n                        }\n\n                        return <Ionicons name={iconName} size={size} color={color}/>\n                    },\n                })}>\n\n                <Tab.Screen name={homeName} component={HomeScreen}/>\n                <Tab.Screen name={detailsName} component={DetailsScreen}/>\n                <Tab.Screen name={cameraMobileName} component={CameraMobileScreen}/>\n            </Tab.Navigator>\n        </NavigationContainer>\n    )\n}\n\n","import * as React from 'react';\nimport MainContainer from './navigation/MainContainer';\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\"\n\n// const Stack = createNativeStackNavigator();\n\n// <NavigationContainer>\n// \t\t\t<Stack.Navigator>\n// \t\t\t\t<Stack.Screen\n// \t\t\t\t\tname=\"Home\"\n// \t\t\t\t\tcomponent={HomeScreen}\n// \t\t\t\t\toptions={{headerShown: false}}\n// \t\t\t\t/>\n// \t\t\t\t<Stack.Screen\n// \t\t\t\t\tname=\"Test\"\n// \t\t\t\t\tcomponent={TestScreen}\n// \t\t\t\t\toptions={{headerShown: false}}\n// \t\t\t\t/>\n// \t\t\t</Stack.Navigator>\n// \t\t</NavigationContainer>\n\nexport default function App() {\n\treturn (\n\t\t<MainContainer/>\n\t);\n}\n\n"],"sourceRoot":""}